
Project proposals are due Sunday night

2 weeks from now is the first major stage

We'll talk about layout stuff today

Flexbox is probably the most complex thing we'll discuss today

SLIDE 2
----------------------
Plan for today


SLIDE 3
----------------------
Poll Everywhere

Have you done your reading for today (chapter 7)

It's better to read beforehand, but still make sure to read the text

---
What concepts from chapter 7 should we go over (or other questions)

Flexbox, flex containers in a flex container
flex shrink, flex grow
floating - away to move something to the side. we don't use it all that often.
it's not really very good for doing columns, or complicated layout

inline block

---
Which of the following are true about 'inline elements?

TRUE - They are positioned horizontally next to each other by default 

FALSE They are positioned vertically 
- these are block elements - 

FALSE - 'div' elements are an example of an 'inline' element
- div elements are block elements
- span are inline

FALSE - You can specify their width and height properties via CSS
- if you have an inline element, you can't specify width and height. if you try and add a width property it won't work.
- if you want it to be inline and you wnat to specify, then you use "inline-block" property

See the stylesample.css example for #element - NOTE that if you hover over the width property in visual code it will say it
won't be applied
This is the reason inline-block was created. 

The place this is used most of the time is if you are in a situation doing a nav bar.

Show the example in the demo 

There are a ton of ways to do nav bars. This is a quick way to format a nav bar. 

FALSE - They can contain 'block' elements inside of them
- you can't put a block element inside of an inline. YOu can, but it's malformed. It probably won't look the way expect
-block elements can contain block and inline elements
-inline elements shouldn't contain block elements


TRUE - They can be made into block elements w/in CSS
- yes, using inline-block. You do this using the display property
- display: "block", "inline", or "inline-block", "none" to switch the property

----
In the below diagram of the box model, which CSS property corresponds to each section?

- 5 is correct - a content, b padding, c border, d margin

padding is a good default to alter if you are trying to keep two elements apart
margin is the more useful if you have a border and if you want to keep the borders apart (if there is a border)

margins collapse, so if you have side by-side-elements the browser will collapse and use the larger of the two margins

padding is contained completely within the element, so if both elements say they need space, that is honored by the browser
and not collapsed.

----


Which of the below CSS rules is equivalent to the first? 
This one is harder

The correct answer is first number is top and bottom, second number is left and right

The reason for this question, you can declare alot of properties using shortcut properties
You can enumerate all 4 for padding,
But writing out 4 rules when they are the same, there is likely a 

padding: 0
set's all to 0

padding 0 .4em; left/right and top/bottom

Borders have lots of options as well with this.

Border: 1px solid black;

border-bottom-width: 5px;
https://developer.mozilla.org/en-US/docs/Web/CSS/border 
You can play around with this. the order should be "width, style, color", but it seems to work in other orders

if you don't specify the values, you'll get the default or whatever is inherited from the element.

------

To make an element fixed to the bottom of the window, which of the following properties would you need to specify? 
Select all that apply



