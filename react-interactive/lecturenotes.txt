Demo Overview
-------------------
SLIDE 2:

We'll spend today going over most of the rest of React

We'll try and pack this into 2 hours.

Any extra time you'll have time to do work time. Lab similarly is going to be about worktime going forward

--------------------
SlIDE 3:

Stage 3 (Due next Tuesday)

You will rewrite the code in REact. It's a clean-up step. We've hit a nice milestone.
Now the task here is to clean things up before we add more functionality
Fix bugs
Make it cleaner and more organized.

React does a nice job of making your code organized.

You will do this in pairs.

The intention of working in pairs is that you have someone else to work through issues
and so that we can start narrowing down to a smaller set of projects.

Pick one persons project. 

You can merge stuff if you want, but its not required.

As you are finishing this up... you should fill in the missing things. 
Make it more useable and make it more polished. But you don't need to build some new feature to add.

It's designed to be an easier stage.


Stage2 functionality

Use an external component... It could be the bootscrap, or font-awesome
If you did it in stage 2, this will pretty easy for you.

Feedback on user interactions, it should be clear
Don't have it change way down the page

Accessible

We will deploy to firebase hosting instead of -gh

This will resolve a number of wierd  things 

There are instructions for how to do this in the assignment writeup.

------------------------

SLIDE 4

Find your partner today!

---------------------
SLIDE 5

Calendar

We're getting to the end of the quarter and new material. Today is kind of the last big lecture. React Router won't be as long of a lecture 
Firebase isn't trivial, but it's not as big of a topic. 

-----------------

SLIDE 6 

Before starting Slide 6, have them get the Demo in place on their machine

If you want to follow along. You can grab the demo from "interactive-react" demo

cd into the react-interactive
run npm install to install dependencies to get everything installed

This is the same TaskList assignment you built previously. Only now
we're building this with React

What components do we see as options?

Task list
Tasks
input box (form)

----React Review

We use "components" as pieces in React
Extending the React Component Class

Each component has it's own render method

We use JSX to define these components

We can pass things in as props as attribute to show what should be showing

We can use {} to pass things in inline.

SLIDE 7

Bring up App.js, use outline view to show 

App
Tasklist
Task
AddTaskForm

GO THROUGH THE SLIDE 7 BEFORE WALKING THROUGH IT IN Visual Studio


START WITH with index.js

The first thing we are doing...

We have an array of task objects called SAMPLE_TASKS

And we Render() an App component and we pass in the array as a prop called "tasks"
--- 
THAT TAKES us to the app.js file

The app component has a render() component

It takes in the intial prop  initialTasks which was passed in as a prop. This calculation will be used in the paragraph above the task list to show how many items are left to be completed. 
Notice it's passed in with a {} which is an inline expression which resolves to the number 2

We have some data processing to look for incomplete tasks using the filter method off of th earray

It renders() a div element which contains another element "TaskList" which passes along the prop tasks which we assigned at the top of the render() method. So it continues to cascade down

Finally we add the <AddTaskForm> component

Does this syntax seem okay?

-----

NOW LETS LOOK at the TaskList component:

It returns an ol embedded with taskComponents in the render() method

It has a basic render() method
It takes in the task component array as a prop, and as we talked about at last lecture we can use the .map() array method to instantiate each of the items in the array as a "<Task>" component which makes "taskComponents" and array of Tasks components and not just the array of objects.

Remember we set the key as well as the task in our initial array because of the warning react gives.

Then we render the list of <taskComponent>

----

FINALLY WE LOOK at the Task component

Each Task element renders as an 'li' with the classname (strike or not), and the task description

The "getClassName() is a helper method to determine if the task is complete or not and set the className to font-strike or not
---------------

Whew, that's the overview.


Any Questions so far

-------------
SLIDE 8

Concepts we'll be covering

------------------
SLIDE 9

React Events

There are 2 interactions we want to support

Clicking on the "Add task to List" and Clicking on items to mark them complete

<click once to see onClick special prop part of slide>
We add add event handling pretty much the same way as DOM and jQuery

We register a listener

We do this give it a special Property called "onClick={ }
Where we pass the callback as a inline value {}


EXAMPLE 1 - Adding event handler to handle clicks to mark complete
in app.js, on the Task component (about line 152)

Here we create a function "handleClick()", there is nothing special in the name

We include "handleClick" without the () in the callback {} because we are passing the recipe not executing it.

Look at the clicky clicky

It should fail because of a lack of arrow function

SLIDE 10
Retaining this

Uncomment the code and it works

Notice what is different between the two arguments in the li...
the this.getClassName() is actually running the function so the this is correct
But the this.handleClick is passing the recipe, so the this is lost when not using an arrow

CLICK to show using an arrow function

CLICK again to show how you can use a public class field

See that it shows which task is clicked on.
---------------

SLIDE 12

So now we want to toggle the state of the item

Rather than logging out "clicky clicky", let's toggle the state of the item.

In this example, we are receiving a function called 'howToToggle' as a prop that we will call to toggle the task each click.


SLIDE 13
Jumping ahead, the second interaction we want to complete is the clicking on the "Add task to list" button.

Click again to show the onClick code

Notice that we are updating "state" rather than trying to use props

Why

-----

SLIDE 14

React Props

props are immutable (unchangeable) and come from elements up the hierarchy

------------------
SLIDE 15
State

Reserved for interactivity... data that changes over time

It looks alot like props but they are very different


Props are initial values.. what goes into the constructor

State data that keeps track of things that change over time

That data can't be stored in props because props don't change

Each componenet keeps track of it's own state

-------------------
SLIDE 16

Using State

How to add in state


We need to initial state in the constructor

Add this to the Task constructor

Always takes in a single argument "props": constructor(props)


We always call the parents version of the constructor  "super(props)"

Click once - component constructor takes in props

Click twice - Must call the superclass constructor too

Click 3 - Set the state value. It must be an object

Click 4 - You can access state like with props {this.state.count}

Don't use something as a state var if it doesn't get used in render()


EXAMPLE STATE --- Example 2 on the Task element

-----------
SLIDE 17

Changing state -
this.setState(stateChanges);

this will both change state and cause a re-render

Click - you only need to change the object values that are changing.

This is an Asynchronous process.

It's done for efficiency. It speeds things up by bundling renders.

We have to call this.setState() rather than assigning a value

It takes as an argument what we want set

AFter setstate gets done, the render is called

It causes the app to re-render

----------------
SLIDE 18

setState() is Asynchronous

It takes time...

----------------
Slide 19

EXAMPLE 2a - modifying something based on current state


If you wanted to increase this count (modify something based on current state)
Then you need to call this.setState() with a callback function rather than an object

It's annoying, but this is how it works

Example 2B

let's store this stuff in state
let's set stuff based on the initial value passed in the props
let's get the toggle to work

-----------------
SLIDE 10: Demo Overview - re-implementing the TaskList

Let's walk through the basic stuff in the app.js file:

Class App - it renders a container with the classlist and the add taskform (which includes the button)

Class TaskList - does the work to map the taskname array into task components.
Returns an 'ol' element with all the taskscomponents

Class Task - does the stuff on tasks (strike, toggle strike)
Returns a task (which includes a onClick handler) in an 'li' element

Class AddTaskForm - Handles to "state" variable for updating when the state var for what's in the edit control
Also calls a callback up the chain in the app object for actually adding a new task to the tasklist (lifting state) 


SLIDE 11
To make this interactive we need to deal with a few concepts:

Events  (like onclick, onfocus, on change, etc)
Accessing the 'this' from an event callback function (using arrow functions or "public class fields")
State and State vs Props
How to change state (use setState())
Implication that setState() is asynchronous
Lifting State (Example - how does the tasklist know to refresh when task is added to task ( a sibling) form?)


SLIDE 12
Events:
Synthetic events - onClick, onFocus, onChange etc...
The chapter has a link to the React Synthetic events. Link to info in Section 21.1 of the course book. 

We add user interaction the same in React as in DOM and jQuery

We register and event listener and specify a callback function to execute when the event fires

There is still an event object that is passed when the event fires.

You can only register the Synthetic Events (like onClick) on HTML Elements, not the Components that
you built

Complications here are how to access the "this" Component from events
It's very common to have a Component's event callback function need to reference
the instance variables or methods of the component (like with the prop, or other helper methods). 
The event callback will usually need to have access to the 'this' context

This is now why you can see why we spent time going over arrow functions. This is one place
where you will need to have access to the 'this' context 

Note in slide 12, we aren't using an Arrow function and if the callback 'doSomething' tried to actually use
the this context, it would throw the error that its undefined.



SLIDE 13
Retaining this

You likely remember we get the cool property with arrow functions that they inherit the parent 'this' context
allowing access to the access the props for the this object.

Here we see that we can wrap the calling of the callback in an arrow and it works

SLIDE 14 
Retaining this

The other option is to use a a public Class fields
It's an experimental JavaScript syntax currently being considered for official inclusion in the JavaScript language.
However we're writing in JSX which isn't javascript and we are using the Babel transpiler to convert to js and it
supports this syntax. So we can use it.

There is perhaps a benefit this method for perf reasons because the function isn't instantiated again each time they
render method is called which it is when the anonomous function is included (wrapped in an arrow function).


SLIDE 15
Demo - onClick - clicking on task in the task listener

Notice that we register the onClick handler here where we are intatiating the task in the return() method

Each task has it's own onClick handler (as is necessary)

We're handling the 'this' issue by usng a public class field (handleClick) which is a public class 


SLIDE 16
Demo onClick on the Form button

Again we register the onClick handler where we are intantiating the button on the form in the return() method

Again 'handleClick' is a public class field which means we get the 'this' context passed along

Notice that we are using the prop 'this.how.ToAdd' to actually add the task... 
AND this prop was set in the parent 'app' object.  There is a method called 'AddTask()' which is 
set in the app render() method and passed in with the 'this' context because it is also a public field class

More on why we bother to this 'addtask' in the 'app' rather than in the 'task' object in a bit 


SLIDE 17
React Props

Props are the components configuration. They are immutable as far as the Component receiving them is concerned.

A Component cannot change its props. Each component is responsible to put together its child components

You access props through the 'this.props.propname'


SLIDE 18

React State

State is where we can keep track of state data of interactive information. It should only keep track of data
that changes over time.

For example - Timers, sort order, which model data is showing... selected filters... things that users can alter.


SLIDE 19
Using State

To use state you have to do this:

Call the constructor with 'props' as an argument
within the constructor 
- Call the 'super' superclass constructor - super(props)
- Assign a value to a state instance. This again must be assigned as an object


To access state it is similar to accessing 'props', the syntax is: 'this.state.statename'

Here's a test to see if a variable should be state... if it isn't accessed in the render() method,
it shouldn't be in state.


SLIDE 20
Changing State

React state is changed asynchronously

We only change state using the this.setState() method, and we pass in the object reflecting which
state variables changes should happen. 

For example look at the handleClick code. we pass in the stateChanges object which is an object 
{count: 1}

Only change the state parameters that need to be updated. stateChanges() merges those changes into 
the state object

stateChanges() automatically renders the Component using the render() method


SLIDE 21
setSTate() is asynchronous

The updated state will only be available when the render() function returns...

This means that there is potential for bugs or weird behavior if you don't do something to handleClick

See the comment //still 0! it hasn't changed yet

For example if you have iterative lines of code that increments a state counter, it is likely that 
the state won't return from render() before the next line of code re-renders




SLIDE 22
setState is asynchronous (2)

The solution to this is to pass a callback function as an argument (instead of an object of new values)
The callback function will be passed the "current" state (and props), and must return the object that
you want merged into the state.



Do not call setState directly within render(), you'll get into an infinite loop

look at the togglecomplete() method an example dealing with this

SLIDE 23
Lifting Up State


In React component state is internal to the component -- the parent, siblings, children don't know the state of
the other Components

But parents can make information available to children through parents

This is how we are able to "communicate" state from parent to child

So how do we communicate state from sibling to sibling ... like the issue we have in our demo?
We have the TaskList component and the Form component which are siblings
When the Form has a new task to add to the Tasklist, how can it communicate that the state has changed?

We move the "state" up to the parent from the child (siblings) so that when something in the child
causes state to change, it's actually updated in the parent, who then can notify all of the children (siblings)
that they need to refresh

SLIDE 24
Passing Callbacks

This is done by having the parent function pass a callback function as a prop the child to execute
Make sure you use an arrow function to bind the this (handle the 'this')

On this slide you can see how to do it

MyButton is the child of App
So we put the handleClick as a prop (function) in the app component (parent)

Then we can pass the function to MyButton in the render() function as a prop

You can see how this is then handled in the MyButton Class
Rather than running a local method, it can run the prop function which is in the parent
and thus state is stored in the parent

This function can be registered with the onClick event like any other function

SLIDE 25 (and 26)

Here's how we did it in the demo

The app (parent) now has the addTask method rather than the TaskList (child)


The method is passed on render to the TaskForm as a prop


SLIDE 26

And this is how the TaskForm handles it
a variable handleClick is created to preventDefault() and to call the parent AddTask function
that was passed in as a prop.

This method is registered with the onClick event



